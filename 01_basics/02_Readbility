Readability in JavaScript — Best Practices
✅ Why It Matters?
Clean code = easier to debug, share, and maintain

Teams and companies prefer readable code over just "working code"

🔸 Example: Technically Valid but Hard to Read
js
Copy
Edit
console.log(3
+ 3); // ✅ This works, but ❌ it's hard to read!
🔹 JavaScript allows this due to its automatic semicolon insertion (ASI), but:

It’s bad practice

Makes code confusing

Can cause subtle bugs

✅ Good Readable Version
js
Copy
Edit
console.log(3 + 3);
🧠 General Readability Tips
Rule	Example
✅ One statement per line	let a = 1;
let b = 2;
✅ Proper indentation	Use 2 or 4 spaces consistently
✅ Meaningful variable names	let count = 5; not let x = 5;
✅ Avoid deeply nested code	Flatten logic with functions
✅ Keep line breaks logical	Don't split in the middle of an operator

🔥 Bad vs Good Example
❌ Bad:

js
Copy
Edit
if(x==1){y=2}else{z=3}
✅ Good:

js
Copy
Edit
if (x === 1) {
  y = 2;
} else {
  z = 3;
}
🧰 Use Tools for Readability
Prettier (Auto-format code)

ESLint (Catch style and logic errors)

VS Code extensions for formatting

🧾 Summary:
✅ Code should not only work, but also be easy to read and understand.

⚠️ Just because something runs doesn’t mean it’s written well!